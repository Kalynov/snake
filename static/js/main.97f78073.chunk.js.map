{"version":3,"sources":["ARSs/snake/actions.ts","ARSs/game/actions.ts","Components/Area/interfaces.tsx","Components/DirectionControl/interfaces.tsx","Components/DirectionControl/index.tsx","Components/Area/AreaItem.tsx","ARSs/area/actions.ts","Components/Area/index.tsx","App.tsx","reportWebVitals.ts","ARSs/area/reducer.ts","ARSs/snake/reducer.ts","ARSs/game/reducer.ts","ARSs/reducers.ts","index.tsx"],"names":["SNAKE_SET_LENGTH","SNAKE_SET_COORDS","SNAKE_ADD_LENGTH","SNAKE_STEP","SNAKE_CHANGE_DIRECTION","GAME_PLAY","GAME_PAUSE","GAME_CRASH","colors","Area","styled","div","Item","type","Control","FlexBoxVertical","FlexBoxHorisontal","Arrow","ArrowWithDirection","p","direction","DirectionControl","setDirection","keyControlHandler","useCallback","event","key","useEffect","document","addEventListener","removeEventListener","onClick","style","width","AreaItem","itemType","memo","AREA_SET_SIZE","GameArea","area","useSelector","state","snake","timerId","game","dispatch","useDispatch","size","height","length","coords","grid","map","el","i","element","j","forEach","coordinate","step","includes","pause","clearInterval","gamePlay","setInterval","snakeChangeDirection","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","play","score","speed","crash","classic","reducers","combineReducers","action","Array","fill","arr","undefined","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.97f78073.chunk.js","sourcesContent":["\nimport {TDirection} from \"./types\"\nexport const SNAKE_SET_LENGTH = \"SNAKE_SET_LENGTH\"\nexport const SNAKE_SET_COORDS = \"SNAKE_SET_COORDS\"\nexport const SNAKE_ADD_LENGTH = \"SNAKE_ADD_LENGTH\"\nexport const SNAKE_STEP = \"SNAKE_STEP\"\nexport const SNAKE_CHANGE_DIRECTION = \"SNAKE_CHANGE_DIRECTION\"\n\n\nexport interface ISnakeSetLength {\n    type: typeof SNAKE_SET_LENGTH,\n    length: number\n}\n\nexport const snakeSetLength = (length: number): ISnakeSetLength =>  ({\n    type: SNAKE_SET_LENGTH,\n    length\n})\n\nexport interface ISnakeSetCoords {\n    type: typeof SNAKE_SET_COORDS,\n    coords: Array<Array<number>>\n}\n\nexport const snakeSetCoords = (coords: Array<Array<number>>): ISnakeSetCoords =>  ({\n    type: SNAKE_SET_COORDS,\n    coords \n})\n\nexport interface ISnakeAddLength {\n    type: typeof SNAKE_ADD_LENGTH,\n}\n\nexport const snakeAddLength = (length: number): ISnakeAddLength =>  ({\n    type: SNAKE_ADD_LENGTH,\n})\n\nexport interface ISnakeStep {\n    type: typeof SNAKE_STEP,\n}\n\nexport const snakeStep = (): ISnakeStep =>  ({\n    type: SNAKE_STEP,\n})\n\nexport interface ISnakeChangeDirection {\n    type: typeof SNAKE_CHANGE_DIRECTION,\n    direction: TDirection\n}\n\nexport const snakeChangeDirection = (direction: TDirection): ISnakeChangeDirection =>  ({\n    type: SNAKE_CHANGE_DIRECTION,\n    direction\n})","import { TTimer } from \"../../globalTypes\";\n\nexport const GAME_PLAY = \"GAME_PLAY\";\nexport const GAME_PAUSE = \"GAME_PAUSE\";\nexport const GAME_CRASH = \"GAME_CRASH\"\n\ninterface GamePlayAction {\n    type: typeof GAME_PLAY,\n    timerId: TTimer\n}\n\ninterface GamePauseAction {\n    type: typeof GAME_PLAY,\n}\n\nexport const gamePlay = (timerId: TTimer): GamePlayAction =>  ({\n    type: GAME_PLAY,\n    timerId\n})\n\n\nexport const gamePause = (): GamePauseAction =>  ({\n    type: GAME_PLAY\n})","import styled from \"styled-components\";\n\nconst colors = [\"transparent\", \"#000000\"]\n\nexport const  Area = styled.div`\n    width: 500px;\n    height: 500px;\n    background-color: #dbeeae;\n    margin: 20px auto;\n    display: flex;\n    flex-wrap: wrap;\n    align-items: flex-start;\n    justify-content: flex-start;\n    align-content: flex-start;\n`;\n\nexport const Item = styled.div<{type: number}>`\n    width: 5px;     \n    height: 5px;\n    background-color: ${({type}) => colors[type]};\n`;\n\nexport const Control = styled.div`\n    width: 700px;\n    height: 50px;\n    top: 10px;\n    margin: 0 auto;\n    background-color: #604a4a;\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n`;","import styled from \"styled-components\";\n\nexport const FlexBoxVertical = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const FlexBoxHorisontal = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\n\ninterface Props {\n    direction: string;\n  }\n\nexport const Arrow = styled.div<Props>`\n    & {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 50px;\n        height: 50px;\n        padding: 0.5em;\n        background-color: #f8d05d;\n        position: relative;\n    }\n    &:after {\n        border-right: solid 20px transparent;\n        border-left: solid 20px transparent;\n        border-top: solid 20px #000000;\n        transform: translateX(-50%) translateY(-50%);\n        position: absolute;\n        z-index: 1;\n        content: \"\";\n        top: 50%;\n        left: 50%;\n    }\n`;\n\nexport const ArrowWithDirection = styled(Arrow)<Props>`\n    transform: ${(p) => {\n        switch (p.direction) {\n            case \"UP\" :\n                return 'rotate(180deg)';\n            case \"DOWN\" :\n                return 'rotate(0deg)';\n            case \"LEFT\" :\n                return 'rotate(90deg)';\n            case \"RIGHT\" :\n                return 'rotate(270deg)'\n        }\n    }};\n`","import React, { useCallback, useEffect } from 'react';\nimport { TDirection } from \"../../ARSs/snake/types\"\n\nimport {\n    FlexBoxVertical,\n    FlexBoxHorisontal,\n    ArrowWithDirection\n} from \"./interfaces\";\n\ninterface IDirectionControlProp {\n    setDirection: (direction: TDirection ) => void\n}\n\n\nexport const DirectionControl = ({\n    setDirection\n}:IDirectionControlProp) => {\n\n    const keyControlHandler = useCallback((event: KeyboardEvent) => {\n        const keyName = event.key;\n        switch (keyName) {\n            case \"ArrowDown\":\n            case  \"s\": {\n                setDirection(\"DOWN\")\n                break\n            }\n            case \"ArrowUp\":\n            case  \"w\": {\n                setDirection(\"UP\")\n                break\n            }\n            case \"ArrowLeft\":\n            case  \"a\": {\n                setDirection(\"LEFT\")\n                break\n            }\n            case \"ArrowRight\":\n            case  \"d\": {\n                setDirection(\"RIGHT\")\n                break\n            }\n        }\n    },[setDirection])\n\n    useEffect(()=> {\n        document.addEventListener(\"keydown\", keyControlHandler);\n        return () => document.removeEventListener(\"keydown\", keyControlHandler)\n    },[keyControlHandler]);\n\n   \n\n\n    return (\n        <FlexBoxVertical>\n            <FlexBoxHorisontal>\n                <ArrowWithDirection \n                    direction={\"UP\"} \n                    onClick={()=> setDirection(\"UP\")} \n                />\n            </FlexBoxHorisontal>\n            <FlexBoxHorisontal style={{width: 198}}>\n                <ArrowWithDirection \n                    direction={\"LEFT\"} \n                    onClick={()=> setDirection(\"LEFT\")} \n                />\n                <ArrowWithDirection \n                    direction={\"RIGHT\"} \n                    onClick={()=> setDirection(\"RIGHT\")} \n                />\n            </FlexBoxHorisontal>\n            <FlexBoxHorisontal>\n                <ArrowWithDirection \n                    direction={\"DOWN\"}  \n                    onClick={()=> setDirection(\"DOWN\")}\n                />\n            </FlexBoxHorisontal>\n        </FlexBoxVertical>\n    );\n}","import React, { memo } from 'react';\n\nimport { Item } from \"./interfaces\";\n\nconst AreaItem = ({\n    key =\"1\", \n    itemType=0\n}) => (\n    <Item  key={key} type={itemType} />\n)\n\n  \n\n\nexport default memo(AreaItem);","\nexport const AREA_SET_SIZE = \"AREA_SET_SIZE\"\n\ninterface Size {\n    width: number;\n    height: number\n}\n\ninterface SetSizeAction {\n    type: typeof AREA_SET_SIZE,\n    size: Size\n}\n\nexport const setSize = (size :Size): SetSizeAction =>  ({\n    type: AREA_SET_SIZE,\n    size\n})","import React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { StoreType } from \"../../ARSs/reducers\";\nimport {snakeSetLength, snakeSetCoords, snakeStep, snakeChangeDirection} from \"../../ARSs/snake/actions\";\nimport { gamePlay, gamePause } from \"../../ARSs/game/actions\";\nimport { Area, Control } from \"./interfaces\";\nimport { DirectionControl } from \"../DirectionControl\";\nimport AreaItem from \"./AreaItem\";\nimport {\n  setSize\n} from \"../../ARSs/area/actions\";\nimport { FlexBoxHorisontal } from \"../DirectionControl/interfaces\";\nimport { TDirection } from \"../../ARSs/snake/types\"\n\n/**\n * для обозначения клеток на поле используются следующие элементы\n * type = 0  // пустая клетка\n * type = 1  // часть змеи\n * type = 2  // еда для змеи\n * \n */\n\n\nexport const GameArea = () => {\n  const area = useSelector((state: StoreType) => state.area)\n  const snake = useSelector((state: StoreType) => state.snake)\n  const timerId = useSelector((state: StoreType) => state.game?.timerId)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setSize({\n      width: 100,\n      height: 100,\n    }))\n    dispatch(snakeSetLength(3));\n    dispatch(snakeSetCoords([[49,50],[49,49],[49,48],[48,48],[47,48],[46,48],[45,48]]))\n  },[dispatch])\n\n  const grid = area.area && area.area.map((el,i) => {\n    return el.map((element, j) => {\n      let type = 0\n      snake.coords && snake.coords.forEach((coordinate) => {\n        if (coordinate[0] === i && coordinate[1] === j)\n          type = 1;\n      })\n      return <AreaItem key={`${i},${j}`} itemType={type}></AreaItem>\n    }) \n  })\n\n  const step = () => {\n    //let selfCross = false\n    //const snakeBodyCoords = snake.coords.slice(1)\n    // snake.coords.forEach(el => {\n    //   if(el[0] + 1)\n    // })\n    if (snake.coords[0].includes(0) ||\n      snake.coords[0].includes(99)\n    ) {\n      pause()\n    } else {\n      dispatch(snakeStep())\n    }    \n  } \n\n  const start = () => {\n    dispatch(gamePlay(setInterval(step, 500)));\n  }\n\n  const pause = () => {\n    if (timerId){\n      clearInterval(timerId);\n      dispatch(gamePause());\n    }\n  }\n\n  const setDirectionSnake = (direction: TDirection) => {\n    dispatch(snakeChangeDirection(direction))\n  }\n\n  return (\n    <Fragment>\n      <Control>\n        <button onClick={start}>Start</button>\n        <button>100X100</button>\n        <button>50X50</button>\n        <button onClick = {pause}>Pause</button>\n        <button onClick = {step}>Step</button>\n      </Control>\n      <FlexBoxHorisontal>\n        <Area>\n          {grid}\n        </Area>\n        <DirectionControl setDirection={setDirectionSnake}/>\n      </FlexBoxHorisontal>\n      \n    </Fragment>\n\n  );\n}\n\n\nexport default GameArea;","import React from 'react';\nimport './App.css';\nimport Area from \"./Components/Area\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Area/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport {AREA_SET_SIZE} from  \"./actions\"\n\n\ninterface InitialState {\n  width: number | null;\n  height: number| null;\n  area: Array<Array<number>> | null\n}\n\nlet initialState: InitialState = {\n    width: null,\n    height: null,\n    area: null\n  }\n\nexport const  area = (state = initialState, action: any) : InitialState => {\n\n    switch (action.type){\n       case AREA_SET_SIZE: {\n        return {\n          ...state,\n          ...action.size,\n          area: new Array(action.size.height).fill(new Array(action.size.width).fill(0))\n        }\n    }\n      default: return state;\n    }\n}","\nimport {\n  SNAKE_SET_LENGTH,\n  SNAKE_SET_COORDS,\n  SNAKE_ADD_LENGTH,\n  SNAKE_STEP,\n  SNAKE_CHANGE_DIRECTION,\n} from  \"./actions\"\n\nimport { TDirection, Action} from \"./types\"\n\n\ninterface InitialState {\n  length: number;\n  coords: Array<Array<number>>,\n  direction:  TDirection,\n  timeoutId?: number,\n}\n\nlet initialState: InitialState = {\n  length: 0,\n  coords: [[0,0]],\n  direction: \"RIGHT\",\n}\n\nexport const snake = (state = initialState, action: Action) : InitialState => {\n\n  switch (action.type){\n    case SNAKE_SET_LENGTH: {\n      return {\n        ...state,\n        length: action.length\n      }\n    }\n    case SNAKE_SET_COORDS: {\n      return {\n        ...state,\n        coords: action.coords\n      }\n    }\n    case SNAKE_ADD_LENGTH: {\n      return {\n        ...state,\n        length: state.length++\n      }\n    }\n    case SNAKE_CHANGE_DIRECTION: {\n      return {\n        ...state,\n        direction: action.direction\n      }\n    }\n    case SNAKE_STEP: {\n      return {\n        ...state,\n        coords: state.coords && state.coords.map((el, i, arr) => {\n          if (i === 0){\n            let newArr = []\n            switch (state.direction){\n              case \"RIGHT\": {\n                newArr = [el[0],el[1]+1]\n                return newArr\n              }\n              case \"LEFT\": {\n                newArr = [el[0],el[1]-1]\n                return newArr\n              }\n              case \"UP\": {\n                newArr = [el[0]-1,el[1]]\n                return newArr\n              }\n              case \"DOWN\": {\n                newArr = [el[0]+1,el[1]]\n                return newArr\n              }\n              default: return el\n            }\n          } else {\n            return arr[i-1]\n          }          \n        })\n      }\n    }\n    default: return state;\n  }\n}","\nimport { GAME_PLAY, GAME_PAUSE, GAME_CRASH } from  \"./actions\";\nimport { TTimer } from \"../../globalTypes\";\n\n\ninterface InitialState {\n  play: boolean;\n  pause: boolean;\n  score: number;\n  speed: number;\n  timerId?: TTimer;\n  crash: boolean;\n  classic: boolean;\n}\n\nlet initialState: InitialState = {\n    play: false,\n    pause: false,\n    score: 0,\n    speed: 1,\n    crash: false,\n    classic: false\n  }\n\nexport const game =  (state = initialState, action: any) : InitialState => {\n    switch (action.type){\n      case GAME_PLAY: {\n        return {\n          ...state,\n          play: true,\n          timerId: action.timerId\n        }\n      }\n      case GAME_PAUSE: {\n        return {\n          ...state,\n          play: true,\n          timerId: undefined\n        }\n      }\n      case GAME_CRASH: {\n        return {\n          ...state,\n          play: true,\n          timerId: undefined\n        }\n      }\n      default: return state;\n    }\n\n  \n}","import {createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { area } from \"./area/reducer\"\nimport { snake } from \"./snake/reducer\"\nimport { game } from \"./game/reducer\"\n\nlet reducers = combineReducers({\n    area,\n    snake,\n    game\n});\n\ndeclare global {\n    interface Window {\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet store = createStore(reducers,\ncompose(composeEnhancers && composeEnhancers(), applyMiddleware(thunkMiddleware))\n);\n\nexport default store; \n\nexport type StoreType = ReturnType<typeof reducers>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport store from './ARSs/reducers';\n\nReactDOM.render(\n  <Provider  store = {store}>\n    <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}